/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        REFERENCE MODULES
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: '^.*ENSEMBLVEP_DOWNLOAD\$' {
        ext.args = "--AUTO c --CONVERT --NO_BIOPERL --NO_TEST --NO_UPDATE"
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        COMMON MODULES
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*GERMLINE:BCFTOOLS_STATS\$" {
        ext.prefix = { "${meta.id}.${meta.caller}" }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        PREPROCESSING
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*CRAM_PREPARE_SAMTOOLS_BEDTOOLS:SAMTOOLS_MERGE\$" {
        ext.args = "--output-fmt CRAM"
    }

    withName: "^.*CRAM_PREPARE_SAMTOOLS_BEDTOOLS:MOSDEPTH\$" {
        ext.args = [
            "--quantize 0:1:4: --mapq 1 --flag 1804 --no-per-base",
            params.mosdepth_slow ? "" : "--fast-mode"
        ].join(" ")
    }

    withName: "^.*CRAM_PREPARE_SAMTOOLS_BEDTOOLS:FILTER_BEDS\$" {
        ext.prefix = { "${meta.id}.filter"}
        ext.args = "-vE \"NO_COVERAGE${params.keep_alt_contigs ? "" : "|alt|random|decoy|Un"}\""
        ext.args2 = "-d 150"
    }

    withName: "^.*CRAM_PREPARE_SAMTOOLS_BEDTOOLS:BEDTOOLS_INTERSECT\$" {
        ext.prefix = {"${meta.id}_intersect"}
        ext.args = "-sorted"
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        GATK4_HAPLOTYPCECALLER
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*CRAM_CALL_GENOTYPE_GATK4:CRAM_CALL_GATK4:GATK4_CALIBRATEDRAGSTRMODEL\$" {
        ext.args    = "--parallel"
    }

    withName: "^.*CRAM_CALL_GENOTYPE_GATK4:CRAM_CALL_GATK4:GATK4_HAPLOTYPECALLER\$" {
        time        = { 16.h  * task.attempt }
        ext.prefix  = {"${meta.id}.g"}
        ext.args    = {
            [
                '-ERC GVCF -contamination "0"',
                '-GQB 10 -GQB 20 -GQB 30 -GQB 40 -GQB 50 -GQB 60 -GQB 70 -GQB 80 -GQB 90',
                '-G StandardAnnotation -G StandardHCAnnotation -G AS_StandardAnnotation',
                params.dragstr ? '--dragen-mode' : '',
                params.hc_phasing ? '' : '--do-not-run-physical-phasing'
            ].join(" ")
        }
    }

    withName: "^.*CRAM_CALL_GATK4:VCF_CONCAT_BCFTOOLS:BCFTOOLS_CONCAT\$" {
        ext.prefix = { "${meta.id}.${meta.caller}.g" }
        ext.args   = '--allow-overlaps --output-type z'
    }

    withName: "^.*CRAM_CALL_GATK4:VCF_CONCAT_BCFTOOLS:TABIX_TABIX\$" {
        ext.args   = ''
    }

    withName: "^.*CRAM_CALL_GATK4:BCFTOOLS_STATS_SINGLE\$" {
        ext.prefix = { "${meta.id}.${meta.caller}" }
    }

    withName: "^.*CRAM_CALL_GENOTYPE_GATK4:GVCF_JOINT_GENOTYPE_GATK4:BCFTOOLS_QUERY\$" {
        ext.args = "--exclude 'QUAL=\".\"' --format '%CHROM\t%POS0\t%END\\n'"
        ext.suffix = "bed"
    }

    withName: "^.*CRAM_CALL_GENOTYPE_GATK4:GVCF_JOINT_GENOTYPE_GATK4:MERGE_BEDS\$" {
        ext.args = "-d ${params.merge_distance}"
    }

    withName: "^.*CRAM_CALL_GENOTYPE_GATK4:GVCF_JOINT_GENOTYPE_GATK4:GAWK\$" {
        ext.args2 = '\'BEGIN {FS="\t"}; {print \$1 FS "0" FS \$2}\''
        ext.suffix = "bed"
    }

    withName: "^.*CRAM_CALL_GENOTYPE_GATK4:GVCF_JOINT_GENOTYPE_GATK4:GATK4_GENOMICSDBIMPORT\$" {
        label = { meta.family_count <= 10 ? "process_medium" : "process_high" }
        time = { 16.h  * task.attempt }
        // Lots of parameters are fetched from https://gatk.broadinstitute.org/hc/en-us/articles/360056138571-GenomicsDBImport-usage-and-performance-guidelines
        ext.args = {
            [
                meta.family_count >= 100 ? "--batch-size 100" : "",
                "--overwrite-existing-genomicsdb-workspace",
                "--genomicsdb-shared-posixfs-optimizations",
                "--merge-input-intervals",
                "--bypass-feature-reader",
                "--max-num-intervals-to-import-in-parallel ${task.cpus*10}",
                "--reader-threads ${task.cpus}",
                meta.family_count >= 100 ? "--consolidate" : "",
                "--merge-contigs-into-num-partitions 25"
            ].join(" ")
        }
        ext.prefix = { "genomicsdb_${meta.id}" }
    }

    withName: "^.*CRAM_CALL_GENOTYPE_GATK4:GVCF_JOINT_GENOTYPE_GATK4:GATK4_GENOTYPEGVCFS\$" {
        time = { 16.h  * task.attempt }
        ext.args = {
            [
                "--allow-old-rms-mapping-quality-annotation-data",
                "-G StandardAnnotation -G AS_StandardAnnotation",
                "-AX ExcessHet -AX InbreedingCoeff"
            ].join(" ")
        }
    }

    withName: "^.*GVCF_JOINT_GENOTYPE_GATK4:VCF_CONCAT_BCFTOOLS:BCFTOOLS_CONCAT\$" {
        ext.prefix = {"${meta.id}.${meta.caller}.concat"}
        ext.args = "--allow-overlaps --output-type z"
    }

    withName: "^.*CRAM_CALL_GENOTYPE_GATK4:VCF_FILTER_BCFTOOLS:FILTER_1\$" {
        ext.prefix = { "${meta.id}_filtered_snps" }
        ext.args = {"--output-type z --soft-filter 'GATKCutoffSNP' -e 'TYPE=\"snp\" && (MQRankSum < -12.5 || ReadPosRankSum < -8.0 || QD < 2.0 || FS > 60.0 || MQ < 30.0)' -m '+'"}
    }

    withName: "^.*CRAM_CALL_GENOTYPE_GATK4:VCF_FILTER_BCFTOOLS:FILTER_2\$" {
        ext.prefix = {"${meta.id}.${meta.caller}.filtered"}
        ext.args = {'--output-type z --soft-filter \'GATKCutoffIndel\' -e \'TYPE="indel" && (ReadPosRankSum < -20.0 || QD < 2.0 || FS > 200.0 || SOR > 10.0 )\' -m \'+\''}
    }


    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        VARDICTJAVA
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*CRAM_CALL_VARDICTJAVA:VARDICTJAVA\$" {
        time        = { 16.h  * task.attempt }
        ext.args    = {
            [
                '-c 1 -S 2 -E 3 -g 4 --nosv --deldupvar -Q 10 -F 0x700',
                "-f ${meta.vardict_min_af ?: params.vardict_min_af} -N ${meta.sample}"
            ].join(" ")
        }
        ext.args2   = {
            [
                "-f ${meta.vardict_min_af ?: params.vardict_min_af} -N ${meta.sample}",
                '-A'
            ].join(" ")
        }
    }

    withName: "^.*CRAM_CALL_VARDICTJAVA:VCF_CONCAT_BCFTOOLS:BCFTOOLS_CONCAT\$" {
        ext.args   = '--allow-overlaps --output-type z'
        ext.prefix = {"${meta.id}.${meta.caller}.concat"}
    }

    withName: "^.*CRAM_CALL_VARDICTJAVA:TABIX_VCFANNO\$" {
        ext.prefix = {"${meta.id}.${meta.caller}.vcfanno"}
    }

    withName: "^.*CRAM_CALL_VARDICTJAVA:VCF_FILTER_BCFTOOLS:FILTER_1\$" {
        ext.args = "-i 'QUAL >= 0${params.only_pass ? " && FILTER=\"PASS\"" : ""}' --output-type z"
    }

    withName: "^.*CRAM_CALL_VARDICTJAVA:VCF_FILTER_BCFTOOLS:FILTER_2\$" {
        ext.args = "--soft-filter 'LowFreqBias' --mode '+' -e  'FORMAT/AF[0] < 0.02 && FORMAT/VD[0] < 30 && INFO/SBF < 0.1 && INFO/NM >= 2.0' --output-type z"
        ext.prefix = {"${meta.id}.${meta.caller}.filtered"}
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        DECOMPOSE & NORMALIZE
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*BCFTOOLS_NORM\$" {
        ext.prefix = {"${meta.id}.${meta.caller}.normalized"}
        ext.args = "-m-"
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        SOMALIER & PED HEADER
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*VCF_EXTRACT_RELATE_SOMALIER:SOMALIER_RELATE\$" {
        ext.args = { ped ? "" : "--infer"}
        ext.prefix = { "${meta.id}.${meta.caller}.somalier" }
    }

    withName: "^.*VCF_PED_RTGTOOLS:RTGTOOLS_PEDFILTER\$" {
        ext.prefix = {"${meta.id}_ped"}
        ext.args = "--vcf"
    }

    withName: "^.*VCF_PED_RTGTOOLS:BCFTOOLS_ANNOTATE\$" {
        ext.prefix = { "${meta.id}.${meta.caller}_ped_annotated" }
        ext.args = "--output-type z"
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        ANNOTATION
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*VCF_ANNOTATION:VCF_ANNOTATE_ENSEMBLVEP:ENSEMBLVEP_VEP\$" {
        memory = { 12.GB * task.attempt }
        ext.args = {[
            // Specify the input format
            "--format vcf",
            // don't contact external db
            '--offline',
            // increase buffer_size to speed up analysis
            "--buffer_size ${params.vep_chunk_size}",
            // output format options
            '--vcf --compress_output bgzip --force_overwrite',
            // annotation options
            '--variant_class --sift b --polyphen b --humdiv --allele_number --numbers --total_length --gene_phenotype --ccds --regulatory',
            // identifiers
            '--hgvs --hgvsg --shift_hgvs 1 --protein --symbol --ccds --uniprot --tsl --appris --canonical --mane --biotype --domains',
            // co-located variant info
            '--check_existing --clin_sig_allele 1 --af --max_af --af_1kg --af_gnomad --pubmed --var_synonyms',
            // plugins
            (params.vep_dbnsfp)         ? "--plugin dbNSFP,${params.dbnsfp.split('/')[-1]},Ensembl_geneid,Ensembl_transcriptid,LRT_score,LRT_pred,MutationTaster_score,MutationTaster_pred,MutationAssessor_score,MutationAssessor_pred,PROVEAN_score,PROVEAN_pred,MetaSVM_score,MetaSVM_pred,MetaLR_score,MetaLR_pred,MetaRNN_score,MetaRNN_pred,M-CAP_score,M-CAP_pred,REVEL_score,BayesDel_addAF_score,BayesDel_addAF_pred,BayesDel_noAF_score,BayesDel_noAF_pred,CADD_phred,DANN_score,fathmm-MKL_coding_score,fathmm-MKL_coding_pred,GenoCanyon_score,gnomAD_exomes_AC,gnomAD_exomes_AN,gnomAD_exomes_AF,gnomAD_exomes_nhomalt,gnomAD_exomes_POPMAX_AF,gnomAD_genomes_AC,gnomAD_genomes_AN,gnomAD_genomes_AF,gnomAD_genomes_nhomalt,gnomAD_genomes_POPMAX_AF,Interpro_domain" : '',
            (params.vep_spliceai)       ? "--plugin SpliceAI,snv=${params.spliceai_snv.split('/')[-1]},indel=${params.spliceai_indel.split('/')[-1]}" : '',
            (params.vep_spliceregion)   ? '--plugin SpliceRegion' : '',
            (params.vep_mastermind)     ? "--plugin Mastermind,${params.mastermind.split('/')[-1]}" : '',
            (params.vep_maxentscan)     ? "--plugin MaxEntScan" : '',
            (params.vep_alphamissense)  ? "--plugin AlphaMissense,file=${params.alphamissense.split('/')[-1]}" : '',
            (params.vep_eog)            ? "--custom ${params.eog.split('/')[-1]},EOG,vcf,overlap,0,AF" : '',
            (params.vep_merged)         ? '--merged' : '',
        ].join(' ').trim()}
        ext.prefix = { "${meta.id}.${meta.caller}.annotated"}
    }

    withName: "^.*VCF_ANNOTATION:VCF_ANNOTATE_ENSEMBLVEP:BCFTOOLS_CONCAT\$" {
        ext.prefix = {"${meta.id}.${meta.caller}.concat"}
        ext.args = "--allow-overlaps --output-type z"
    }

    withName: "^.*VCF_ANNOTATION:VCF_ANNOTATE_ENSEMBLVEP:BCFTOOLS_SORT\$" {
        ext.prefix = {"${meta.id}.${meta.caller}.sorted"}
    }

    withName: "^.*VCF_ANNOTATION:BGZIP_ANNOTATED_VCFS\$" {
        ext.prefix = {"${meta.id}.${meta.caller}.vcfanno"}
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        VALIDATION
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*VCF_VALIDATE_SMALL_VARIANTS:RTGTOOLS_VCFEVAL\$" {
        ext.args   = {"--sample ${meta.sample} --decompose"}
        ext.prefix = {"${meta.sample}.${meta.caller}"}
    }

    withName: "^.*VCF_VALIDATE_SMALL_VARIANTS:RTGTOOLS_ROCPLOT\$" {
        ext.args   = ''
        ext.prefix = {"${meta.sample}.${meta.caller}.${meta.roc_type}"}
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        FINAL PROCESSES
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*VCF2DB\$" {
        ext.args = "--a-ok gnomAD_AC --a-ok gnomAD_Hom"
        ext.prefix = { "${meta.id}.${meta.caller}" }
    }

    withName: "^.*VCF_UPD_UPDIO:UPDIO\$" {
        ext.prefix = {"updio_${meta.caller}_${meta.id}"}
        ext.args = {[
            "--childID ${meta.child}",
            "--momID ${meta.mother}",
            "--dadID ${meta.father}",
            "--include_MI"
        ].join(" ")}
    }

    withName: "^.*VCF_ROH_AUTOMAP:AUTOMAP_AUTOMAP\$" {
        ext.prefix = {"automap_${meta.caller}_${meta.id}"}
        ext.args = {[
            meta.family_count > 1 ? "--multivcf" : "--id ${meta.samples}",
            params.automap_panel_name ? "--panelname ${params.automap_panel_name}" : ""
        ].findAll { it != "" }.join(" ")}
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        QC and version control
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
    }

}

env {
    // Add env variables for MOSDEPTH
    MOSDEPTH_Q0 = 'NO_COVERAGE'
    MOSDEPTH_Q1 = 'LOW_COVERAGE'
    MOSDEPTH_Q2 = 'CALLABLE'
}
