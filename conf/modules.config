/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    def individuals_output = "individuals"
    def final_output = "ready" // The name of the folder containing the final output inside of the output directory
    def validation_output = "validation"

    publishDir = [
        enabled: false
    ]

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        PREPROCESSING
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*:SAMPLE_PREPARATION:MOSDEPTH\$" {
        ext.args = [
            "--quantize 0:1:4: --mapq 1 --flag 1804 --no-per-base",
            params.coverage_fast ? "--fast-mode" : ""
        ].join(" ")
        publishDir  = [
            overwrite: true,
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${individuals_output}/${meta.sample}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
    }

    withName: "^.*:SAMPLE_PREPARATION:FILTER_BEDS\$" {
        ext.prefix = {"${meta.id}_callable"}
    }

    withName: "^.*:SAMPLE_PREPARATION:BEDTOOLS_INTERSECT\$" {
        ext.prefix = {"${meta.id}_intersect"}
        ext.args = "-sorted"
        publishDir  = [
            overwrite: true,
            enabled: true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${individuals_output}/${meta.sample}" },
            saveAs: { filename -> filename.endsWith(".bed") ? filename.replace("_intersect", "") : null }
        ] // SAVE
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        GERMLINE VARIANT CALLING
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(params.dragstr && params.caller == "haplotypecaller") {
        withName: "^.*:GERMLINE_VARIANT_CALLING:CALIBRATEDRAGSTRMODEL\$" {
            ext.args    = "--parallel"
        }
    }

    if(params.caller == "haplotypecaller") {
        withName: "^.*:GERMLINE_VARIANT_CALLING:HAPLOTYPECALLER\$" {
            time        = { check_max( 16.h  * task.attempt, 'time' ) }
            ext.prefix  = {"${meta.id}.g"}
            ext.args    = {
                [
                    '-ERC GVCF -contamination "0"',
                    '-GQB 10 -GQB 20 -GQB 30 -GQB 40 -GQB 50 -GQB 60 -GQB 70 -GQB 80 -GQB 90',
                    '-G StandardAnnotation -G StandardHCAnnotation -G AS_StandardAnnotation',
                    params.dragen_mode ? '--dragen-mode' : ''
                ].join(" ")
            }
        }

        withName: "^.*:GERMLINE_VARIANT_CALLING:VCF_GATHER_BCFTOOLS:BCFTOOLS_CONCAT\$" {
            publishDir  = [
                overwrite: true,
                enabled: true,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${individuals_output}/${meta.sample}" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
            ext.prefix = { "${meta.id}.g" }
            ext.args   = '--allow-overlaps'
        }

        withName: "^.*:GERMLINE_VARIANT_CALLING:VCF_GATHER_BCFTOOLS:TABIX_TABIX\$" {
            publishDir = [
                path: { "${params.outdir}/${individuals_output}/${meta.sample}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
            ext.args   = ''
        }
    } else {
        withName: "^.*:GERMLINE_VARIANT_CALLING:DEEPVARIANT\$" {
            publishDir  = [
                overwrite: true,
                enabled: true,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${individuals_output}/${meta.sample}" },
                saveAs: { filename -> filename.endsWith('.g.vcf.gz') ? filename : null }
            ] // SAVE
            ext.args   = { "--model_type ${meta.analysis_type}" }
        }

        withName: "^.*:GERMLINE_VARIANT_CALLING:TABIX_TABIX\$" {
            publishDir = [
                path: { "${params.outdir}/${individuals_output}/${meta.sample}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
            ext.args   = ''
        }
    }


    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        JOINT GENOTYPING
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*:JOINT_GENOTYPING:MERGE_BEDS\$" {
        ext.args = "-d ${params.merge_distance}"
        publishDir = [
            enabled: true,
            overwrite: true,
            path: { "${params.outdir}/${final_output}/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
    }

    withName: "^.*JOINT_GENOTYPING:GENOMICSDBIMPORT\$" {
        time = { check_max( 16.h  * task.attempt, 'time' ) }
        ext.args = {
            [
                "--genomicsdb-vcf-buffer-size 16384000",
                "--overwrite-existing-genomicsdb-workspace true",
                "--genomicsdb-shared-posixfs-optimizations true",
                "--merge-input-intervals true",
                "--bypass-feature-reader true"
            ].join(" ")
        }
    }

    withName: "^.*JOINT_GENOTYPING:GENOTYPE_GVCFS\$" {
        time = { check_max( 16.h  * task.attempt, 'time' ) }
        ext.args = {
            [
                "--allow-old-rms-mapping-quality-annotation-data",
                "-G StandardAnnotation -G AS_StandardAnnotation",
                "-AX ExcessHet -AX InbreedingCoeff"
            ].join(" ")
        }
    }

    withName: "^.*:JOINT_GENOTYPING:VCF_GATHER_BCFTOOLS:BCFTOOLS_CONCAT\$" {
        ext.prefix = {"${meta.id}.concat"}
        ext.args = "--allow-overlaps"
        publishDir = [
            enabled: !params.add_ped,
            overwrite: true,
            path: { "${params.outdir}/${final_output}/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                        filename ==~ /^.*\.vcf.gz$/ ? filename.replace(".concat", "") :
                        null
                    }
        ] // SAVE
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        FILTERING
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(params.filter){
        withName: FILTER_SNPS {
            ext.prefix = { "${meta.id}_filtered_snps" }
            ext.args = '-O z --soft-filter \'GATKCutoffSNP\' -e \'TYPE="snp" && (MQRankSum < -12.5 || ReadPosRankSum < -8.0 || QD < 2.0 || FS > 60.0 || (QD < 10.0 && AD[0:1] / (AD[0:1] + AD[0:0]) < 0.25 && ReadPosRankSum < 0.0) || MQ < 30.0)\' -m \'+\''
        }

        withName: FILTER_INDELS {
            ext.args = '-O z --soft-filter \'GATKCutoffIndel\' -e \'TYPE="indel" && (ReadPosRankSum < -20.0 || QD < 2.0 || FS > 200.0 || SOR > 10.0 || (QD < 10.0 && AD[0:1] / (AD[0:1] + AD[0:0]) < 0.25 && ReadPosRankSum < 0.0))\' -m \'+\''
        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        SOMALIER
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*:VCF_EXTRACT_RELATE_SOMALIER:SOMALIER_RELATE\$" {
        ext.args = { ped ? "" : "--infer"}
        publishDir = [
            overwrite: true,
            path: { "${params.outdir}/${final_output}/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                        filename ==~ /^.*\.html$/ ? "reports/" + filename.replace(".html", "_somalier.html") :
                        filename ==~ /^.*\.samples\.tsv$/ ? filename :
                        filename ==~ /^.*\.ped$/ ? filename.replace("_somalier.ped", ".ped") :
                        null
                    }
        ] // SAVE
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        ADD PED HEADER
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(params.add_ped) {
        withName: "^.*:ADD_PED_HEADER:RTGTOOLS_PEDFILTER\$" {
            ext.prefix = {"${meta.id}_ped"}
            ext.args = "--vcf"
        }

        withName: "^.*:ADD_PED_HEADER:BCFTOOLS_ANNOTATE\$" {
            ext.prefix = {"${meta.id}_ped_header"}
            ext.args = "--output-type z"
            publishDir = [
                enabled: !params.annotate,
                overwrite: true,
                path: { "${params.outdir}/${final_output}/${meta.family}" },
                mode: params.publish_dir_mode,
                saveAs: { filename ->
                            filename ==~ /^.*_ped_header\.vcf.gz$/ ? filename.replace("_ped_header", "") :
                            null
                        }
            ] // SAVE
        }
    }


    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        QUALITY CONTROL
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: BCFTOOLS_STATS_INDIVIDUALS {
        publishDir = [
            overwrite: true,
            path: { "${params.outdir}/${individuals_output}/${meta.sample}/reports" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
    }

    withName: BCFTOOLS_STATS_FAMILY {
        publishDir = [
            overwrite: true,
            path: { "${params.outdir}/${final_output}/${meta.family}/reports" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        ANNOTATION
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(params.annotate){
        withName: "^.*:ANNOTATION:ENSEMBLVEP_VEP\$" {
            // errorStrategy = { task.exitStatus = 255 ? 'retry' : 'terminate' }
            // maxRetries = 3
            // container = {params.vep_cache ? "quay.io/biocontainers/ensembl-vep:${params.vep_version}--pl5321h4a94de4_${task.attempt - 1}" : "nfcore/vep:${params.vep_version}.${params.genome}"}
            container = "docker.io/nfcore/vep:${params.vep_version}.${params.genome}"
            ext.prefix = {"${meta.id}_${meta.regions.contains(",") ? "alt" : meta.regions }"}
            ext.args = {[
                // Specify the input format
                "--format vcf",
                // select the chromosomes to run on
                "--chr ${meta.regions}",
                // don't contact external db
                '--offline',
                // increase buffer_size to speed up analysis
                '--buffer_size 100000',
                // output format options
                '--vcf --compress_output bgzip --force_overwrite',
                // annotation options
                '--variant_class --sift b --polyphen b --humdiv --allele_number --numbers --total_length --gene_phenotype --ccds --regulatory',
                // identifiers
                '--hgvs --hgvsg --shift_hgvs 1 --protein --symbol --ccds --uniprot --tsl --appris --canonical --mane --biotype --domains',
                // co-located variant info
                '--check_existing --clin_sig_allele 1 --af --max_af --af_1kg --af_gnomad --pubmed --var_synonyms',
                // plugins
                (params.vep_dbnsfp)         ? "--plugin dbNSFP,${params.dbnsfp.split('/')[-1]},Ensembl_geneid,Ensembl_transcriptid,LRT_score,LRT_pred,MutationTaster_score,MutationTaster_pred,MutationAssessor_score,MutationAssessor_pred,PROVEAN_score,PROVEAN_pred,MetaSVM_score,MetaSVM_pred,MetaLR_score,MetaLR_pred,MetaRNN_score,MetaRNN_pred,M-CAP_score,M-CAP_pred,REVEL_score,BayesDel_addAF_score,BayesDel_addAF_pred,BayesDel_noAF_score,BayesDel_noAF_pred,CADD_phred,DANN_score,fathmm-MKL_coding_score,fathmm-MKL_coding_pred,GenoCanyon_score,gnomAD_exomes_AC,gnomAD_exomes_AN,gnomAD_exomes_AF,gnomAD_exomes_nhomalt,gnomAD_exomes_POPMAX_AF,gnomAD_genomes_AC,gnomAD_genomes_AN,gnomAD_genomes_AF,gnomAD_genomes_nhomalt,gnomAD_genomes_POPMAX_AF,Interpro_domain" : '',
                (params.vep_spliceai)       ? "--plugin SpliceAI,snv=${params.spliceai_snv.split('/')[-1]},indel=${params.spliceai_indel.split('/')[-1]}" : '',
                (params.vep_spliceregion)   ? '--plugin SpliceRegion' : '',
                (params.vep_mastermind)     ? "--plugin Mastermind,${params.mastermind.split('/')[-1]}" : '',
                (params.vep_maxentscan)     ? "--plugin MaxEntScan,${params.maxentscan.split('/')[-1]}" : '',
                (params.vep_eog)            ? "--custom ${params.eog.split('/')[-1]},EOG,vcf,overlap,0,AF" : '',
                (params.vep_merged)         ? '--merged' : '',
            ].join(' ').trim()}
        }

        withName: ".*:ANNOTATION:BCFTOOLS_CONCAT\$" {
            publishDir = [
                enabled: params.vcfanno ? false : true,
                overwrite: true,
                path: { "${params.outdir}/${final_output}/${meta.family}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
        }

        if (params.vcfanno){
            withName: "^.*:ANNOTATION:BGZIP_ANNOTATED_VCFS\$" {
                publishDir = [
                    overwrite: true,
                    path: { "${params.outdir}/${final_output}/${meta.family}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ] // SAVE
            }
        }

    }


    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        VALIDATION
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if (params.validate){
        withName: "^.*:VCF_VALIDATE_SMALL_VARIANTS:HAPPY_HAPPY\$" {
            publishDir = [
                enabled: true,
                overwrite: true,
                path: { "${params.outdir}/${validation_output}/${meta.sample}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
            ext.args   = {"--engine vcfeval"}
            ext.prefix = {"${meta.sample}"}
        }

        withName: "^.*:VCF_VALIDATE_SMALL_VARIANTS:RTGTOOLS_VCFEVAL\$" {
            publishDir = [
                enabled: true,
                overwrite: true,
                path: { "${params.outdir}/${validation_output}/${meta.sample}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
            ext.args   = {"--sample ${meta.sample}"}
            ext.prefix = {"${meta.sample}"}
        }

        withName: "^.*:VCF_VALIDATE_SMALL_VARIANTS:RTGTOOLS_ROCPLOT\$" {
            publishDir = [
                enabled: true,
                overwrite: true,
                path: { "${params.outdir}/${validation_output}/${meta.sample}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
            ext.args   = ''
            ext.prefix = {"${meta.sample}"}
        }

    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        FINAL PROCESSES
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(params.gemini){
        withName: VCF2DB{
            publishDir = [
                overwrite: true,
                path: { "${params.outdir}/${final_output}/${meta.family ?: meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
        }
    }

    withName: TABIX_FINAL {
        publishDir = [
            enabled: true,
            overwrite: true,
            path: { "${params.outdir}/${final_output}/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }

    withName: MULTIQC {
        publishDir = [
            overwrite: true,
            path: { "${params.outdir}/multiqc_reports" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE => Fix the location problem
        errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
        ext.args      = { params.multiqc_config ? "--config $multiqc_custom_config" : "" }
    }

}

env {
    // Add env variables for MOSDEPTH
    MOSDEPTH_Q0 = 'NO_COVERAGE'
    MOSDEPTH_Q1 = 'LOW_COVERAGE'
    MOSDEPTH_Q2 = 'CALLABLE'
}
