/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        enabled: false
    ]

    withName: BEDTOOLS_SPLIT {
        ext.args   = '--algorithm simple'
    }

    withName: CALIBRATEDRAGSTRMODEL {
        cpus       = { check_max( 12 * task.attempt, 'cpus' ) }
        ext.args   = ''
    }

    withName: HAPLOTYPECALLER {
        publishDir  = [ 
            enabled: params.scatter_count <= 1 ? true : false,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/individuals/${meta.samplename}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE if scatter count <= 1
        cpus        = { check_max( 1 * task.attempt, 'cpus' ) }
        ext.prefix  = {"${meta.id}.g"}
        ext.args    = '-ERC GVCF -contamination "0" -GQB 10 -GQB 20 -GQB 30 -GQB 40 -GQB 50 -GQB 60 -GQB 70 -GQB 80 -GQB 90 -G StandardAnnotation -G StandardHCAnnotation -G AS_StandardAnnotation --dragen-mode'
    }

    withName: BCFTOOLS_CONCAT {
        publishDir  = [ 
            enabled: params.scatter_count > 1 ? true : false,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/individuals/${meta.samplename}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE if scatter count > 1
        ext.prefix = { "${meta.id}.g" }
        ext.args   = '-a'
    }

    withName: TABIX_GVCFS {
        publishDir = [ 
            path: { "${params.outdir}/individuals/${meta.samplename}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
        ext.args   = ''
    }

    withName: REBLOCKGVCF {
        publishDir = [ 
            path: { "${params.outdir}/individuals/${meta.samplename}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
        ext.args   = '-do-qual-approx --floor-blocks -GQB 20 -GQB 30 -GQB 40'
    }

    withName: COMBINEGVCFS {
        publishDir = [ 
            path: { "${params.outdir}/families/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
        ext.args   = ''
    }

    withName: TABIX_COMBINED_GVCFS {
        publishDir = [ 
            path: { "${params.outdir}/families/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
        ext.args   = ''
    }

    withName: BCFTOOLS_MERGE {
        publishDir = [ 
            path: { "${params.outdir}/families/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
        ext.args   = {"--gvcf $fasta -m none --output-type z --force-samples"}
    }

    withName: GENOTYPE_GVCFS {
        publishDir = [ 
            path: { "${params.outdir}/families/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
        ext.prefix = { "${meta.id}_genotyped" }
        ext.args   = '--allow-old-rms-mapping-quality-annotation-data -G StandardAnnotation -G AS_StandardAnnotation'
    }

    withName: BCFTOOLS_VIEW {
        ext.prefix = { "${meta.id}_viewed.g" }
        ext.args   = '-e \'QUAL="."\''
    }

    withName: BCFTOOLS_CONVERT {
        publishDir = [ 
            path: { "${params.outdir}/families/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
        ext.prefix = { "${meta.id}_converted" }
        ext.args   = '--gvcf2vcf --output-type v'
    }

    withName: PEDFILTER {
        ext.prefix = { "${meta.id}_pedigree" }
    }

    withName: BGZIP_PED_VCFS {
        publishDir = [
            path: { "${params.outdir}/families/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
    }

    withName: FILTER_SNPS {       
        ext.prefix = { "${meta.id}_filtered_snps" }
        if( params.output_mode == "seqplorer" ){
            ext.args = '-O v --soft-filter \'GATKCutoffSNP\' -e \'TYPE="snp" && (MQRankSum < -12.5 || ReadPosRankSum < -8.0 || QD < 2.0 || FS > 60.0 || (QD < 10.0 && AD[0:1] / (AD[0:1] + AD[0:0]) < 0.25 && ReadPosRankSum < 0.0) || MQ < 30.0)\' -m \'+\''
        }
        else if ( params.output_mode == "seqr" ){
            // TODO add seqr support (to be discussed) => don't forget to remove if statement in postprocess.nf!
            ext.args = ''
        }
    }

    withName: FILTER_INDELS {
        publishDir = [
            path: { "${params.outdir}/families/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE        
        ext.prefix = { "${meta.id}_filtered_snps_indels" }
        if( params.output_mode == "seqplorer" ){
            ext.args = '-O v --soft-filter \'GATKCutoffIndel\' -e \'TYPE="indel" && (ReadPosRankSum < -20.0 || QD < 2.0 || FS > 200.0 || SOR > 10.0 || (QD < 10.0 && AD[0:1] / (AD[0:1] + AD[0:0]) < 0.25 && ReadPosRankSum < 0.0))\' -m \'+\''
        }
        else if ( params.output_mode == "seqr" ){
            // TODO add seqr support (to be discussed) => don't forget to remove if statement in postprocess.nf!
            ext.args = ''
        }
    }

    withName: BCFTOOLS_STATS {
        publishDir = [
            path: { "${params.outdir}/families/${meta.family}/reports" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE        
    }

    withName: 'VCFTOOLS_.*'{
        publishDir = [
            path: { "${params.outdir}/families/${meta.family}/reports" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE        
    }

    withName: VCFTOOLS_TSTV_COUNT{
        ext.args = "--TsTv-by-count"
    }

    withName: VCFTOOLS_TSTV_QUAL{
        ext.args = "--TsTv-by-qual"
    }

    withName: VCFTOOLS_SUMMARY{
        ext.args = "--FILTER-summary"
    }

    withName: ENSEMBLVEP {
        publishDir = [
            enabled: params.vcfanno ? false : true,
            path: { "${params.outdir}/families/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.family}_ensemblvep.ann.vcf" }
        ] // SAVE        
        // errorStrategy = { task.exitStatus = 255 ? 'retry' : 'terminate' }
        // maxRetries = 3
        // container = {params.vep_merged_cache ? "quay.io/biocontainers/ensembl-vep:${params.vep_version}--pl5321h4a94de4_${task.attempt - 1}" : "nfcore/vep:${params.vep_version}.${params.genome}"}
        container = "nfcore/vep:${params.vep_version}.${params.genome}"
        ext.args = [
            '--vcf --everything --filter_common --per_gene --total_length --offline --force_overwrite --buffer_size 100000 --hgvsg --shift_hgvs 1 --humdiv --var_synonyms --allele_number',
            (params.vep_dbnsfp && params.dbnsfp)                                  ? "--plugin dbNSFP,${params.dbnsfp.split('/')[-1]},rs_dbSNP,HGVSc_VEP,HGVSp_VEP,1000Gp3_EAS_AF,1000Gp3_AMR_AF,LRT_score,GERP++_RS,gnomAD_exomes_AF" : '',
            (params.vep_spliceai && params.spliceai_snv && params.spliceai_indel) ? "--plugin SpliceAI,snv=${params.spliceai_snv.split('/')[-1]},indel=${params.spliceai_indel.split('/')[-1]}"                     : '',
            (params.vep_spliceregion)                                             ? '--plugin SpliceRegion' : '',
            (params.vep_mastermind && params.mastermind)                          ? "--plugin Mastermind,${params.mastermind.split('/')[-1]}" : '',
            (params.vep_eog && params.eog)                                        ? "--custom ${params.eog.split('/')[-1]},EOG,vcf,overlap,0,AF" : '',
            (params.vep_merged_cache)                                             ? '--merged' : '',
        ].join(' ').trim()
    }

    withName: VCFANNO {
        publishDir = [
            path: { "${params.outdir}/families/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.family}_ensemblvep-vcfanno.ann.vcf" }
        ] // SAVE        
    }

    withName: VCF2DB{
        publishDir = [
            path: { "${params.outdir}/families/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE        
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }

    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/multiqc_reports" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE => Fix the location problem  
        errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
        ext.args      = { params.multiqc_config ? "--config $multiqc_custom_config" : "" }
    }

}
