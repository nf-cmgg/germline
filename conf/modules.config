/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

def enableOutput(state) {
    """
    This function checks if the output of the given module should be published to the output directory.
    The higher the option is in the list, the higher the priority of being in the output directory
    """
    def order = [
        "vcfanno": params.vcfanno && params.annotate,
        "annotate": params.annotate,
        "add_ped": params.add_ped,
        "normalize": params.normalize,
        "filter": params.filter,
        "vqsr": params.vqsr,
        "original": true
    ]

    return order.findIndexOf{it.key == state} == order.findIndexOf{it.value == true}
}

def date = params.skip_date_project ? "" : "${new Date().format("yyyy-MM-dd")}_"
def final_output = { "${params.outdir}/${params.project ? "${date}${params.project}" : "${date}${workflow.runName}"}/${meta.family}" }
def final_output_reports = { "${params.outdir}/${params.project ? "${date}${params.project}" : "${date}${workflow.runName}"}/${meta.family}/reports" }
def individual_output = { "${params.outdir}/${meta.sample}" }
def individual_reports = { "${params.outdir}/${meta.sample}/reports" }
def individual_validation = { "${params.outdir}/${meta.sample}/validation/${meta.caller}" }

def callers = params.callers.tokenize(",")

def final_prefix = { params.output_suffix ? "${meta.id}${params.output_suffix}" : "${meta.id}.${meta.caller}" }

process {

    publishDir = [
        enabled: false
    ]

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        REFERENCE MODULES
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(params.annotate) {
        withName: '^.*ENSEMBLVEP_DOWNLOAD\$' {
            ext.args = "--AUTO c --CONVERT --NO_BIOPERL --NO_TEST --NO_UPDATE"
        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        COMMON MODULES
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*GERMLINE:BCFTOOLS_STATS\$" {
        publishDir = [
            overwrite: true,
            enabled: true,
            path: final_output_reports,
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] // SAVE
        ext.prefix = final_prefix
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        PREPROCESSING
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*CRAM_PREPARE_SAMTOOLS_BEDTOOLS:SAMTOOLS_MERGE\$" {
        ext.args = "--output-fmt CRAM"
    }

    withName: "^.*CRAM_PREPARE_SAMTOOLS_BEDTOOLS:MOSDEPTH\$" {
        ext.args = [
            "--quantize 0:1:4: --mapq 1 --flag 1804 --no-per-base",
            params.mosdepth_slow ? "" : "--fast-mode"
        ].join(" ")
        publishDir  = [
            overwrite: true,
            enabled: true,
            mode: params.publish_dir_mode,
            path: individual_output,
            saveAs: { filename ->
                filename.endsWith('.global.dist.txt') || filename.endsWith('.summary.txt') ? "reports/${filename}" : null
            }
        ] // SAVE
    }

    withName: "^.*CRAM_PREPARE_SAMTOOLS_BEDTOOLS:FILTER_BEDS\$" {
        ext.prefix = { "${meta.id}.filter"}
        ext.args = "-vE \"NO_COVERAGE${params.keep_alt_contigs ? "" : "|alt|random|decoy|Un"}\""
        ext.args2 = "-d 150"
        publishDir  = [
            overwrite: true,
            enabled: true,
            mode: params.publish_dir_mode,
            path: individual_output,
            saveAs: { filename -> filename.endsWith(".bed") ? filename.replace(".filter", "") : null }
        ] // SAVE
    }

    withName: "^.*CRAM_PREPARE_SAMTOOLS_BEDTOOLS:BEDTOOLS_INTERSECT\$" {
        ext.prefix = {"${meta.id}_intersect"}
        ext.args = "-sorted"
        publishDir  = [
            overwrite: true,
            enabled: true,
            mode: params.publish_dir_mode,
            path: individual_output,
            saveAs: { filename -> filename.endsWith(".bed") ? filename.replace("_intersect", "") : null }
        ] // SAVE
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        GATK4_HAPLOTYPCECALLER
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if("haplotypecaller" in callers) {
        if(params.dragstr) {
            withName: "^.*CRAM_CALL_GENOTYPE_GATK4:CRAM_CALL_GATK4:GATK4_CALIBRATEDRAGSTRMODEL\$" {
                ext.args    = "--parallel"
            }
        }

        withName: "^.*CRAM_CALL_GENOTYPE_GATK4:CRAM_CALL_GATK4:GATK4_HAPLOTYPECALLER\$" {
            time        = { check_max( 16.h  * task.attempt, 'time' ) }
            ext.prefix  = {"${meta.id}.g"}
            ext.args    = {
                [
                    '-ERC GVCF -contamination "0"',
                    '-GQB 10 -GQB 20 -GQB 30 -GQB 40 -GQB 50 -GQB 60 -GQB 70 -GQB 80 -GQB 90',
                    '-G StandardAnnotation -G StandardHCAnnotation -G AS_StandardAnnotation',
                    params.dragstr ? '--dragen-mode' : ''
                ].join(" ")
            }
        }

        withName: "^.*CRAM_CALL_GATK4:VCF_CONCAT_BCFTOOLS:BCFTOOLS_CONCAT\$" {
            publishDir  = [
                overwrite: true,
                enabled: true,
                mode: params.publish_dir_mode,
                path: individual_output,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
            ext.prefix = { "${meta.id}.${meta.caller}.g" }
            ext.args   = '--allow-overlaps --output-type z'
        }

        withName: "^.*CRAM_CALL_GATK4:VCF_CONCAT_BCFTOOLS:TABIX_TABIX\$" {
            publishDir = [
                overwrite: true,
                enabled: true,
                path: individual_output,
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
            ext.args   = ''
        }

        withName: "^.*CRAM_CALL_GATK4:BCFTOOLS_STATS_SINGLE\$" {
            publishDir = [
                overwrite: true,
                enabled: true,
                path: individual_reports,
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
            ext.prefix = final_prefix
        }

        if(!params.only_call) {
            withName: "^.*CRAM_CALL_GENOTYPE_GATK4:GVCF_JOINT_GENOTYPE_GATK4:BCFTOOLS_QUERY\$" {
                ext.args = "--exclude 'QUAL=\".\"' --format '%CHROM\t%POS0\t%END\\n'"
                ext.suffix = "bed"
            }

            withName: "^.*CRAM_CALL_GENOTYPE_GATK4:GVCF_JOINT_GENOTYPE_GATK4:MERGE_BEDS\$" {
                ext.args = "-d ${params.merge_distance}"
                publishDir = [
                    enabled: true,
                    overwrite: true,
                    path: final_output,
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ] // SAVE
            }

            withName: "^.*CRAM_CALL_GENOTYPE_GATK4:GVCF_JOINT_GENOTYPE_GATK4:GAWK\$" {
                ext.args2 = '\'BEGIN {FS="\t"}; {print \$1 FS "0" FS \$2}\''
                ext.suffix = "bed"
            }

            withName: "^.*CRAM_CALL_GENOTYPE_GATK4:GVCF_JOINT_GENOTYPE_GATK4:GATK4_GENOMICSDBIMPORT\$" {
                label = { meta.family_count <= 10 ? "process_medium" : "process_high" }
                time = { check_max( 16.h  * task.attempt, 'time' ) }
                // Lots of parameters are fetched from https://gatk.broadinstitute.org/hc/en-us/articles/360056138571-GenomicsDBImport-usage-and-performance-guidelines
                ext.args = {
                    [
                        meta.family_count >= 100 ? "--batch-size 100" : "",
                        "--overwrite-existing-genomicsdb-workspace",
                        "--genomicsdb-shared-posixfs-optimizations",
                        "--merge-input-intervals",
                        "--bypass-feature-reader",
                        "--max-num-intervals-to-import-in-parallel ${task.cpus*10}",
                        "--reader-threads ${task.cpus}",
                        meta.family_count >= 100 ? "--consolidate" : "",
                        "--merge-contigs-into-num-partitions 25"
                    ].join(" ")
                }
                ext.prefix = { "genomicsdb_${meta.id}" }
                publishDir = [
                    enabled: params.only_merge || params.output_genomicsdb,
                    overwrite: true,
                    path: final_output,
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ] // SAVE
            }

            if(!params.only_merge) {
                withName: "^.*CRAM_CALL_GENOTYPE_GATK4:GVCF_JOINT_GENOTYPE_GATK4:GATK4_GENOTYPEGVCFS\$" {
                    time = { check_max( 16.h  * task.attempt, 'time' ) }
                    ext.args = {
                        [
                            "--allow-old-rms-mapping-quality-annotation-data",
                            "-G StandardAnnotation -G AS_StandardAnnotation",
                            "-AX ExcessHet -AX InbreedingCoeff"
                        ].join(" ")
                    }
                }

                withName: "^.*GVCF_JOINT_GENOTYPE_GATK4:VCF_CONCAT_BCFTOOLS:BCFTOOLS_CONCAT\$" {
                    ext.prefix = enableOutput("original") ? final_prefix : {"${meta.id}.concat"}
                    ext.args = "--allow-overlaps --output-type z"
                    publishDir = [
                        enabled: enableOutput("original"),
                        overwrite: true,
                        path: final_output,
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ] // SAVE
                }

                if(params.vqsr) {
                    withName: "^.*VCF_VQSR_GATK4:GATK4_VARIANTRECALIBRATOR_SNPS" {
                        // -an DP => This option is not advised for WES runs, see if this can somehow still be added to WGS runs
                        ext.args = [
                            "-an QD",
                            "-an MQ",
                            "-an MQRankSum",
                            "-an ReadPosRankSum",
                            "-an FS",
                            "-an SOR",
                            "-mode SNP"
                        ].join(" ")
                    }

                    withName: "^.*VCF_VQSR_GATK4:GATK4_VARIANTRECALIBRATOR_INDELS" {
                        // -an DP => This option is not advised for WES runs, see if this can somehow still be added to WGS runs
                        ext.args = [
                            "-an QD",
                            "-an MQRankSum",
                            "-an ReadPosRankSum",
                            "-an FS",
                            "-an SOR",
                            "-mode INDEL"
                        ].join(" ")
                    }

                    withName: "^.*VCF_VQSR_GATK4:GATK4_APPLYVQSR_SNPS" {
                        ext.args   = "--truth-sensitivity-filter-level 99.9 -mode SNP"
                        ext.prefix = { "${meta.id}_snp" }
                    }

                    withName: "^.*VCF_VQSR_GATK4:GATK4_APPLYVQSR_INDELS" {
                        ext.args   = "--truth-sensitivity-filter-level 99.9 -mode INDEL"
                        ext.prefix = enableOutput("vqsr") ? final_prefix : { "${meta.id}.vqsr" }
                        publishDir = [
                            enabled: enableOutput("vqsr"),
                            overwrite: true,
                            path: final_output,
                            mode: params.publish_dir_mode,
                            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                        ] // SAVE
                    }
                }

                if(params.filter){
                    withName: "^.*CRAM_CALL_GENOTYPE_GATK4:VCF_FILTER_BCFTOOLS:FILTER_1\$" {
                        ext.prefix = { "${meta.id}_filtered_snps" }
                        ext.args = {"--output-type z --soft-filter 'GATKCutoffSNP' -e 'TYPE=\"snp\" && (MQRankSum < -12.5 || ReadPosRankSum < -8.0 || QD < 2.0 || FS > 60.0 || MQ < 30.0)' -m '+'"}
                    }

                    withName: "^.*CRAM_CALL_GENOTYPE_GATK4:VCF_FILTER_BCFTOOLS:FILTER_2\$" {
                        ext.prefix = enableOutput("filter") ? final_prefix : {"${meta.id}.filtered"}
                        ext.args = {'--output-type z --soft-filter \'GATKCutoffIndel\' -e \'TYPE="indel" && (ReadPosRankSum < -20.0 || QD < 2.0 || FS > 200.0 || SOR > 10.0 )\' -m \'+\''}
                        publishDir = [
                            enabled: enableOutput("filter"),
                            overwrite: true,
                            path: final_output,
                            mode: params.publish_dir_mode,
                            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                        ] // SAVE
                    }
                }
            }
        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        VARDICTJAVA
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if("vardict" in callers) {
        withName: "^.*CRAM_CALL_VARDICTJAVA:VARDICTJAVA\$" {
            time        = { check_max( 16.h  * task.attempt, 'time' ) }
            ext.prefix  = {"${meta.id}"}
            ext.args    = {
                [
                    '-c 1 -S 2 -E 3 -g 4 --nosv --deldupvar -Q 10 -F 0x700',
                    "-f ${meta.vardict_min_af ?: params.vardict_min_af} -N ${meta.sample}"
                ].join(" ")
            }
            ext.args2   = {
                [
                    "-f ${meta.vardict_min_af ?: params.vardict_min_af} -N ${meta.sample}",
                    '-A'
                ].join(" ")
            }
        }

        withName: "^.*CRAM_CALL_VARDICTJAVA:VCF_CONCAT_BCFTOOLS:BCFTOOLS_CONCAT\$" {
            ext.args   = '--allow-overlaps --output-type z'
            ext.prefix = enableOutput("original") ? final_prefix : {"${meta.id}.concat"}
            publishDir  = [
                overwrite: true,
                enabled: enableOutput("original"),
                mode: params.publish_dir_mode,
                path: final_output,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
        }

        withName: "^.*CRAM_CALL_VARDICTJAVA:TABIX_VCFANNO\$" {
            ext.prefix = enableOutput("original") ? final_prefix : {"${meta.id}.vcfanno"}
            publishDir  = [
                overwrite: true,
                enabled: enableOutput("original"),
                mode: params.publish_dir_mode,
                path: final_output,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
        }

        if(params.filter) {
            withName: "^.*CRAM_CALL_VARDICTJAVA:VCF_FILTER_BCFTOOLS:FILTER_1\$" {
                ext.args = "-i 'QUAL >= 0${params.only_pass ? " && FILTER=\"PASS\"" : ""}' --output-type z"
            }

            withName: "^.*CRAM_CALL_VARDICTJAVA:VCF_FILTER_BCFTOOLS:FILTER_2\$" {
                ext.args = "--soft-filter 'LowFreqBias' --mode '+' -e  'FORMAT/AF[0] < 0.02 && FORMAT/VD[0] < 30 && INFO/SBF < 0.1 && INFO/NM >= 2.0' --output-type z"
                ext.prefix = enableOutput("filter") ? final_prefix : {"${meta.id}.filtered"}
                publishDir  = [
                    overwrite: true,
                    enabled: enableOutput("filter"),
                    mode: params.publish_dir_mode,
                    path: final_output,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ] // SAVE
            }
        }

        withName: "^.*CRAM_CALL_VARDICTJAVA:TABIX_TABIX\$" {
            publishDir  = [
                overwrite: true,
                enabled: enableOutput("filter") || enableOutput("original"),
                mode: params.publish_dir_mode,
                path: final_output,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
        }


    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        DECOMPOSE & NORMALIZE
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(params.normalize) {
        withName: "^.*BCFTOOLS_NORM\$" {
            ext.prefix = enableOutput("normalize") ? final_prefix : {"${meta.id}.normalized"}
            ext.args = "-m-"
            publishDir  = [
                overwrite: true,
                enabled: enableOutput("normalize"),
                mode: params.publish_dir_mode,
                path: final_output,
                saveAs: { filename -> filename.endsWith('.vcf.gz') ? filename : null }
            ] // SAVE
        }

    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        SOMALIER & PED HEADER
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(!params.only_call && !params.only_merge) {

        withName: "^.*VCF_EXTRACT_RELATE_SOMALIER:SOMALIER_RELATE\$" {
            ext.args = { ped ? "" : "--infer"}
            ext.prefix = final_prefix
            publishDir = [
                overwrite: true,
                enabled: true,
                path: final_output,
                mode: params.publish_dir_mode,
                saveAs: { filename ->
                            filename ==~ /^.*\.html$/ ? "reports/" + filename.replace(".html", ".somalier.html") :
                            filename ==~ /^.*\.ped$/ ? filename.replace("_somalier.ped", ".ped") :
                            null
                        }
            ] // SAVE
        }

        if(params.add_ped) {
            withName: "^.*VCF_PED_RTGTOOLS:RTGTOOLS_PEDFILTER\$" {
                ext.prefix = {"${meta.id}_ped"}
                ext.args = "--vcf"
            }

            withName: "^.*VCF_PED_RTGTOOLS:BCFTOOLS_ANNOTATE\$" {
                ext.prefix = enableOutput("add_ped") ? final_prefix : { "${meta.id}.${meta.caller}_ped_annotated" }
                ext.args = "--output-type z"
                publishDir = [
                    enabled: enableOutput("add_ped"),
                    overwrite: true,
                    path: final_output,
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ] // SAVE
            }
        }

        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            ANNOTATION
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */

        if(params.annotate){
            withName: "^.*VCF_ANNOTATION:VCF_ANNOTATE_ENSEMBLVEP:ENSEMBLVEP_VEP\$" {
                memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
                ext.args = {[
                    // Specify the input format
                    "--format vcf",
                    // don't contact external db
                    '--offline',
                    // increase buffer_size to speed up analysis
                    "--buffer_size ${params.vep_chunk_size}",
                    // output format options
                    '--vcf --compress_output bgzip --force_overwrite',
                    // annotation options
                    '--variant_class --sift b --polyphen b --humdiv --allele_number --numbers --total_length --gene_phenotype --ccds --regulatory',
                    // identifiers
                    '--hgvs --hgvsg --shift_hgvs 1 --protein --symbol --ccds --uniprot --tsl --appris --canonical --mane --biotype --domains',
                    // co-located variant info
                    '--check_existing --clin_sig_allele 1 --af --max_af --af_1kg --af_gnomad --pubmed --var_synonyms',
                    // plugins
                    (params.vep_dbnsfp)         ? "--plugin dbNSFP,${params.dbnsfp.split('/')[-1]},Ensembl_geneid,Ensembl_transcriptid,LRT_score,LRT_pred,MutationTaster_score,MutationTaster_pred,MutationAssessor_score,MutationAssessor_pred,PROVEAN_score,PROVEAN_pred,MetaSVM_score,MetaSVM_pred,MetaLR_score,MetaLR_pred,MetaRNN_score,MetaRNN_pred,M-CAP_score,M-CAP_pred,REVEL_score,BayesDel_addAF_score,BayesDel_addAF_pred,BayesDel_noAF_score,BayesDel_noAF_pred,CADD_phred,DANN_score,fathmm-MKL_coding_score,fathmm-MKL_coding_pred,GenoCanyon_score,gnomAD_exomes_AC,gnomAD_exomes_AN,gnomAD_exomes_AF,gnomAD_exomes_nhomalt,gnomAD_exomes_POPMAX_AF,gnomAD_genomes_AC,gnomAD_genomes_AN,gnomAD_genomes_AF,gnomAD_genomes_nhomalt,gnomAD_genomes_POPMAX_AF,Interpro_domain" : '',
                    (params.vep_spliceai)       ? "--plugin SpliceAI,snv=${params.spliceai_snv.split('/')[-1]},indel=${params.spliceai_indel.split('/')[-1]}" : '',
                    (params.vep_spliceregion)   ? '--plugin SpliceRegion' : '',
                    (params.vep_mastermind)     ? "--plugin Mastermind,${params.mastermind.split('/')[-1]}" : '',
                    (params.vep_maxentscan)     ? "--plugin MaxEntScan" : '',
                    (params.vep_alphamissense)  ? "--plugin AlphaMissense,file=${params.alphamissense.split('/')[-1]}" : '',
                    (params.vep_eog)            ? "--custom ${params.eog.split('/')[-1]},EOG,vcf,overlap,0,AF" : '',
                    (params.vep_merged)         ? '--merged' : '',
                ].join(' ').trim()}
            }

            withName: "^.*VCF_ANNOTATION:VCF_ANNOTATE_ENSEMBLVEP:BCFTOOLS_CONCAT\$" {
                ext.prefix = {"${meta.id}_concat"}
                ext.args = "--allow-overlaps --output-type z"
            }

            withName: "^.*VCF_ANNOTATION:VCF_ANNOTATE_ENSEMBLVEP:BCFTOOLS_SORT\$" {
                publishDir = [
                    enabled: enableOutput("annotate"),
                    overwrite: true,
                    path: final_output,
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ] // SAVE
                ext.prefix = enableOutput("annotate") ? final_prefix : {"${meta.id}.sorted"}
            }

            if (params.vcfanno){
                withName: "^.*VCF_ANNOTATION:BGZIP_ANNOTATED_VCFS\$" {
                    publishDir = [
                        enabled: enableOutput("vcfanno"),
                        overwrite: true,
                        path: final_output,
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ] // SAVE
                    ext.prefix = enableOutput("vcfanno") ? final_prefix : {"${meta.id}.vcfanno"}
                }
            }

        }


        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            VALIDATION
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */

        if (params.validate){

            withName: "^.*VCF_VALIDATE_SMALL_VARIANTS:RTGTOOLS_VCFEVAL\$" {
                publishDir = [
                    enabled: true,
                    overwrite: true,
                    path: individual_validation,
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ] // SAVE
                ext.args   = {"--sample ${meta.sample} --decompose"}
                ext.prefix = {"${meta.sample}"}
            }

            withName: "^.*VCF_VALIDATE_SMALL_VARIANTS:RTGTOOLS_ROCPLOT\$" {
                publishDir = [
                    enabled: true,
                    overwrite: true,
                    path: individual_validation,
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ] // SAVE
                ext.args   = ''
                ext.prefix = {"${meta.sample}.${meta.roc_type}"}
            }

        }

        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            FINAL PROCESSES
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */

        if(params.gemini){
            withName: "^.*VCF2DB\$" {
                ext.args = "--a-ok gnomAD_AC --a-ok gnomAD_Hom"
                ext.prefix = final_prefix
                publishDir = [
                    overwrite: true,
                    path: final_output,
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ] // SAVE
            }
        }

        if(params.updio) {
            withName: "^.*VCF_UPD_UPDIO:UPDIO\$" {
                ext.prefix = {"updio_${meta.caller}"}
                ext.args = {[
                    "--childID ${meta.child}",
                    "--momID ${meta.mother}",
                    "--dadID ${meta.father}",
                    "--include_MI"
                ].join(" ")}
                publishDir = [
                    overwrite: true,
                    path: final_output,
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : "${filename}/${meta.child}" }
                ] // SAVE
            }
        }

        if(params.automap) {
            withName: "^.*VCF_ROH_AUTOMAP:AUTOMAP_AUTOMAP\$" {
                ext.prefix = {"automap_${meta.caller}"}
                ext.args = {[
                    meta.family_count > 1 ? "--multivcf" : "",
                    params.automap_panel_name ? "--panelname ${params.automap_panel_name}" : ""
                ].findAll { it != "" }.join(" ")}
                publishDir = [
                    overwrite: true,
                    path: final_output,
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ] // SAVE
            }
        }

        withName: "^.*TABIX_FINAL\$" {
            publishDir = [
                enabled: true,
                overwrite: true,
                path: final_output,
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ] // SAVE
        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        QC and version control
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}

env {
    // Add env variables for MOSDEPTH
    MOSDEPTH_Q0 = 'NO_COVERAGE'
    MOSDEPTH_Q1 = 'LOW_COVERAGE'
    MOSDEPTH_Q2 = 'CALLABLE'
}
