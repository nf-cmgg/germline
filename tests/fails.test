nextflow_pipeline {

    name "Tests of the pipeline with failing options"
    script "main.nf"

    test("Missing required parameter") {

        when {
            params {
                fasta = null
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("* Missing required parameter: --fasta")
        }

    }

    test("Seqplorer mode VCFanno - No required inputs") {

        when {
            params {
                output_mode = "seqplorer"
                vcfanno     = true
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("A TOML file and resource directory should be supplied when using vcfanno (use --vcfanno_toml and --vcfanno_resources)")
        }

    }

    test("Seqplorer mode DBNSFP - No required inputs") {

        when {
            params {
                output_mode = "seqplorer"
                vep_dbnsfp  = true
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Please specify '--vep_dbsnf true', '--dbnsfp PATH/TO/DBNSFP/FILE' and '--dbnspf_tbi PATH/TO/DBNSFP/INDEX/FILE' to use the dbnsfp VEP plugin.")
        }

    }

    test("Seqplorer mode SpliceAI - No required inputs") {

        when {
            params {
                output_mode     = "seqplorer"
                vep_spliceai    = true
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Please specify '--vep_spliceai true', '--spliceai_snv PATH/TO/SPLICEAI/SNV/FILE', '--spliceai_snv_tbi PATH/TO/SPLICEAI/SNV/INDEX/FILE', '--spliceai_indel PATH/TO/SPLICEAI/INDEL/FILE' and '--spliceai_indel_tbi PATH/TO/SPLICEAI/INDEL/INDEX/FILE' to use the SpliceAI VEP plugin.")
        }

    }


    test("Seqplorer mode MasterMind - No required inputs") {

        when {
            params {
                output_mode     = "seqplorer"
                vep_mastermind  = true
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Please specify '--vep_mastermind true', '--mastermind PATH/TO/MASTERMIND/FILE' and '--mastermind_tbi PATH/TO/MASTERMIND/INDEX/FILE' to use the mastermind VEP plugin.")
        }

    }


    test("Seqplorer mode EOG - No required inputs") {

        when {
            params {
                output_mode   = "seqplorer"
                vep_eog       = true
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("Please specify '--vep_eog true', '--eog PATH/TO/EOG/FILE' and '--eog_tbi PATH/TO/EOG/INDEX/FILE' to use the EOG custom VEP plugin.")
        }

    }
}
