nextflow_workflow {

    name "Test Workflow CRAM_PREPARE_SAMTOOLS_BEDTOOLS"
    script "subworkflows/local/cram_prepare_samtools_bedtools/main.nf"
    workflow "CRAM_PREPARE_SAMTOOLS_BEDTOOLS"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "cram_prepare_samtools_bedtools"

    test("cram_prepare_samtools_bedtools - default - WGS") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", duplicate_count:1],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true)
                ])
                input[1] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", duplicate_count:1],
                    []
                ])
                input[2] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[4] = []
                input[5] = false
                """
            }
        }

        then {
            def fasta = "https://github.com/nf-cmgg/test-datasets/raw/germline/data/genomics/homo_sapiens/genome/hg38_chr21_22000000_23000000.fasta"
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.ready_crams.collect {
                        [ it[0], it[1], file(it[2]).name ]
                    },
                    workflow.out.ready_bams.collect {
                        [ it[0], "${file(it[1]).name},readsMD5:${bam(it[1]).getReadsMD5()}", file(it[2]).name ]
                    },
                    workflow.out.ready_beds,
                    workflow.out.reports
                ).match("default - WGS") }
            )
        }

    }

    test("cram_prepare_samtools_bedtools - default - WES common ROI") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", duplicate_count:1],
                    file(params.cram1, checkIfExists:true),
                    file(params.crai1, checkIfExists:true)
                ])
                input[1] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", duplicate_count:1],
                    []
                ])
                input[2] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[4] = Channel.fromPath(params.bed, checkIfExists:true)
                input[5] = true
                """
            }
        }

        then {
            def fasta = "https://github.com/nf-cmgg/test-datasets/raw/germline/data/genomics/homo_sapiens/genome/hg38_chr21_22000000_23000000.fasta"
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.ready_crams.collect {
                        [ it[0], it[1], file(it[2]).name ]
                    },
                    workflow.out.ready_bams.collect {
                        [ it[0], "${file(it[1]).name},readsMD5:${bam(it[1]).getReadsMD5()}", file(it[2]).name ]
                    },
                    workflow.out.ready_beds,
                    workflow.out.reports
                ).match("default - WES common ROI") }
            )
        }

    }

    test("cram_prepare_samtools_bedtools - default - WES") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", duplicate_count:1],
                    file(params.cram1, checkIfExists:true),
                    []
                ])
                input[1] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", duplicate_count:1],
                    file(params.bed, checkIfExists:true)
                ])
                input[2] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[4] = []
                input[5] = false
                """
            }
        }

        then {
            def fasta = "https://github.com/nf-cmgg/test-datasets/raw/germline/data/genomics/homo_sapiens/genome/hg38_chr21_22000000_23000000.fasta"
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.ready_crams.collect {
                        [ it[0], it[1], file(it[2]).name ]
                    },
                    workflow.out.ready_bams.collect {
                        [ it[0], "${file(it[1]).name},readsMD5:${bam(it[1]).getReadsMD5()}", file(it[2]).name ]
                    },
                    workflow.out.ready_beds,
                    workflow.out.reports
                ).match("default - WES") }
            )
        }

    }

    test("cram_prepare_samtools_bedtools - default - merge") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", duplicate_count:2],
                    file(params.cram1, checkIfExists:true),
                    []
                ],[
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", duplicate_count:2],
                    file(params.cram2, checkIfExists:true),
                    []
                ])
                input[1] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", duplicate_count:2],
                    file(params.bed, checkIfExists:true)
                ],[
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", duplicate_count:2],
                    []
                ])
                input[2] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[4] = []
                input[5] = true
                """
            }
        }

        then {
            def fasta = "https://github.com/nf-cmgg/test-datasets/raw/germline/data/genomics/homo_sapiens/genome/hg38_chr21_22000000_23000000.fasta"
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.ready_crams.collect {
                        [ it[0], "${file(it[1]).name},readsMD5:${cram(it[1], fasta).getReadsMD5()}", file(it[2]).name ]
                    },
                    workflow.out.ready_bams.collect {
                        [ it[0], "${file(it[1]).name},readsMD5:${bam(it[1]).getReadsMD5()}", file(it[2]).name ]
                    },
                    workflow.out.ready_beds,
                    workflow.out.reports
                ).match("default - merge") }
            )
        }

    }

}
