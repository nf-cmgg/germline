nextflow_workflow {

    name "Test Workflow GVCF_JOINT_GENOTYPE_GATK4"
    script "subworkflows/local/gvcf_joint_genotype_gatk4/main.nf"
    workflow "GVCF_JOINT_GENOTYPE_GATK4"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "gvcf_joint_genotype_gatk4"
    tag "vcf_concat_bcftools"
    tag "input_split_bedtools"

    test("gvcf_joint_genotype_gatk4 - single_sample") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", caller:"haplotypecaller"],
                    file(params.gvcf1, checkIfExists:true),
                    file(params.gtbi1, checkIfExists:true)
                ])
                input[1] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[2] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"dict"],
                    file(params.dict, checkIfExists:true)
                ])
                input[4] = [[],[]]
                input[5] = [[],[]]
                input[6] = false
                input[7] = 2
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.vcfs.collect { [it[0], "${file(it[1]).name},variantsMD5:${path(it[1]).vcf.variantsMD5}", file(it[2]).name] }
                ).match() }
            )
        }

    }

    test("gvcf_joint_genotype_gatk4 - family") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143,NA24149", caller:"haplotypecaller"],
                    file(params.gvcf1, checkIfExists:true),
                    file(params.gtbi1, checkIfExists:true)
                ],[
                    [id:"NA24149", sample:"NA24149", family:"Ashkenazim", family_samples:"NA24143,NA24149", caller:"haplotypecaller"],
                    file(params.gvcf2, checkIfExists:true),
                    file(params.gtbi2, checkIfExists:true)
                ]
                )
                input[1] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[2] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"dict"],
                    file(params.dict, checkIfExists:true)
                ])
                input[4] = [[],[]]
                input[5] = [[],[]]
                input[6] = false
                input[7] = 2
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.vcfs.collect { [it[0], "${file(it[1]).name},variantsMD5:${path(it[1]).vcf.variantsMD5}", file(it[2]).name] }
                ).match() }
            )
        }

    }

    test("gvcf_joint_genotype_gatk4 - only_merge") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143", caller:"haplotypecaller"],
                    file(params.gvcf1, checkIfExists:true),
                    file(params.gtbi1, checkIfExists:true)
                ])
                input[1] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[2] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"dict"],
                    file(params.dict, checkIfExists:true)
                ])
                input[4] = [[],[]]
                input[5] = [[],[]]
                input[6] = true
                input[7] = 2
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.vcfs
                ).match() }
            )
        }

    }

    test("gvcf_joint_genotype_gatk4 - single_sample + family") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [id:"NA24143", sample:"NA24143", family:"Ashkenazim", family_samples:"NA24143,NA24149", caller:"haplotypecaller"],
                    file(params.gvcf1, checkIfExists:true),
                    file(params.gtbi1, checkIfExists:true)
                ],[
                    [id:"NA24149", sample:"NA24149", family:"Ashkenazim", family_samples:"NA24143,NA24149", caller:"haplotypecaller"],
                    file(params.gvcf2, checkIfExists:true),
                    file(params.gtbi2, checkIfExists:true)
                ],[
                    [id:"NA24385", sample:"NA24385", family:"NA24385", family_samples:"NA24385", caller:"haplotypecaller"],
                    file(params.gvcf3, checkIfExists:true),
                    file(params.gtbi3, checkIfExists:true)
                ]
                )
                input[1] = Channel.value([
                    [id:"fasta"],
                    file(params.fasta, checkIfExists:true)
                ])
                input[2] = Channel.value([
                    [id:"fai"],
                    file(params.fai, checkIfExists:true)
                ])
                input[3] = Channel.value([
                    [id:"dict"],
                    file(params.dict, checkIfExists:true)
                ])
                input[4] = [[],[]]
                input[5] = [[],[]]
                input[6] = false
                input[7] = 2
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.vcfs.collect { [it[0], "${file(it[1]).name},variantsMD5:${path(it[1]).vcf.variantsMD5}", file(it[2]).name] }
                ).match() }
            )
        }

    }
}
